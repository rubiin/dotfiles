alias ari="aria2c"
alias c="clear"
alias cloc="echo use scc command instead"
alias clear-npm="rm -rf node_modules;rm -rf pnpm-lock.yaml package-lock.json yarn.lock"
alias clear-orphan-packages="sudo pacman -Qtdq | sudo pacman -Rns -"
alias clear-store-npm="npm cache clear --force;yarn cache clean;pnpm store prune"
alias code="code-insiders"
alias crap="fortune" # This will keep you sane when you're about to smash the keyboard again.
alias cz="chezmoi"
alias curl='curl --progress-bar'
alias hyde="Hyde"
alias dc="docker-compose"
alias df="df -h"    # disk free, in Gigabytes, not bytes
alias du="du -h -c" # calculate disk usage for a folder
alias docker-compose="dc"
alias htop="btop"
alias fixvlc='mkdir ~/.cache/vlc'
alias g="git"
alias grep='grep --color=auto'
alias lzd="lazydocker"
alias lzg="lazygit"
alias myzsh='source ~/.zshrc'
alias make='make --silent --warn-undefined-variables'
alias nord="nordvpn"
alias neofetch="fastfetch"
alias practice-vim="docker run -it --rm brandoncc/vim-be-good:stable"
alias rate-and-update='export TMPFILE="$(mktemp)"; \
    sudo true; \
    rate-mirrors --save=$TMPFILE arch --max-delay=21600 \
      && sudo mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-backup \
      && sudo mv $TMPFILE /etc/pacman.d/mirrorlist \
      && ua-drop-caches \
      && yay -Syyu --noconfirm && update-all'
alias today="npx aaja"
alias tz="npx taze"
alias ua-drop-caches='sudo paccache -rk3; yay -Sc --aur --noconfirm'
alias update-all='yay -Syyu --noconfirm && taze -gwi && asdf update && asdf plugin update --all && omz update && code_update_extensions && cd ~/.config/nvim && g ssa && git pull & g sa & cd'
alias uuid="uuidgen -r | xclip -selection clipboard"
alias ssh='TERM=xterm-256color ssh'
alias validate-compose="docker-compose config --quiet && printf "OK\n" || printf "ERROR\n""
alias vmc='git diff --name-only --diff-filter=U'
alias yt="youtube-dl"
alias scripts="cat package.json | jq --color-output '.scripts'"
alias ytd="yt-dlp"
alias q=' exit' # INFO leading space to ignore it in history due to `HIST_IGNORE_SPACE`
alias yolo='git commit --allow-empty-message -m "" && git push origin master'
# prefer $EDITOR over vim when present
if type nvim >/dev/null 2>&1; then
	alias vim='nvim'
fi
alias hg='history | grep'
alias wget='wget --hsts-file="$XDG_DATA_HOME/wget-hsts" -c'
alias cp="cp -i"                  # confirm before overwriting something
alias grep='grep --color=auto'    #enables case-insensitive text searching with colorized output.
alias mv='mv -i'                  # confirm before overwriting something

# Copy / paste
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'

alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

alias cz-add-all="cz add \
  .bash_aliases \
  .zshrc \
  .zshenv \
  .bashenv \
  .bashrc \
  .tmux.conf.local \
  .tool-versions \
  sudoers.lecture \
  .ssh/config \
  .bin \
  .local/share/fonts/ \
  .config/alacritty/alacritty.toml \
  .config/atuin/config.toml \
  .config/bat/config \
  .config/btop/ \
  .config/git/ \
  .config/npm \
  .config/kitty \
  .config/wezterm \
  .config/.curlrc \
  .config/.asdfrc \
  .config/mimeapps.list \
  .config/lazygit \
  .config/neofetch \
  .config/dolphinrc \
  .config/lvim \
  .config/Mousepad/accels.scm \
  .config/mpv \
  .config/persepolis_download_manager/persepolis.conf
"

# Edit config files
alias envim="$EDITOR ~/.config/nvim"
alias ezsh="$EDITOR ~/.zshrc"
alias ehypr="$EDITOR ~/.config/hypr/"
alias ecz="$EDITOR ~/.local/share/chezmoi/"

# IP addresses
alias pubip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1'"
alias ips="sudo ifconfig -a | grep -o 'inet6\\? \\(addr:\\)\\?\\s\\?\\(\\(\\([0-9]\\+\\.\\)\\{3\\}[0-9]\\+\\)\\|[a-fA-F0-9:]\\+\\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# ls
alias l='eza -lh  --icons=auto'                                        # long list
alias ls='eza -1   --icons=auto'                                       # short list
alias ll='eza -lha --icons=auto --sort=name --group-directories-first' # long list all
alias ld='eza -lhD --icons=auto'                                       # long list dirs
alias lt='eza --icons=auto --tree'

# Always mkdir a path (this doesn't inhibit functionality to make a single dir)
alias mkdir='mkdir -p'

# Fixes "Error opening terminal: xterm-kitty" when using the default kitty term to open some programs through ssh
# alias ssh='kitten ssh'

# Handy change dir shortcuts
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

alias cat="bat"

# tmux
alias t="tmux"
alias ta="t a -t"
alias tls="t ls"
alias tn="t new -t"
alias tmux_end="pkill -f tmux"

## npm aliases
alias ni="npm install"
alias nrs="npm run start -s --"
alias nrb="npm run build -s --"
alias nrf="npm run format -s --"
alias nrd="npm run start:dev -s --"
alias nrt="npm run test -s --"
alias nrtw="npm run test:watch -s --"
alias nrv="npm run validate -s --"
alias rmn="rm -rf node_modules"
alias flush-npm="rm -rf node_modules && npm i && say NPM is done"
alias nicache="npm install --prefer-offline"
alias nioff="npm install --offline"
alias nrm="npm run typeorm:run"

## yarn aliases

alias y="yarn"
alias yi="yarn install"
alias ya="yarn add"
alias yr="yarn remove"
alias yau="yarn audit"
alias yrs="yarn run start"
alias yrd="yarn run start:dev"
alias yup="yarn upgrade"

#pnpm aliases
alias p="pnpm"
alias pp="pnpm prune"
alias pi="pnpm i"
alias pid="pnpm i -D"
alias pih="pnpm i --shamefully-hoist=true"

# bun aliases
alias b="bun"
alias bi="bun install"
alias br="bun run"

## asdf aliases
alias asdf_update="asdf plugin update --all"
alias asdf_plugins="asdf plugin list"
alias asdf_add_plugin="asdf plugin add"
alias asdf_remove_plugin="asdf plugin remove"
alias asdf_install_version="asdf install"
alias asdf_list_version="asdf list"
alias asdf_global_version_set="asdf global"

alias yayskip='yay -S --mflags --skipinteg'

alias git-rre-delete="rm -rf .git/rr-cache"

# most used commands
alias most-used="history | awk '{print $2}' | sort | uniq -c | sort -nr | head -10"

# Checks whether connection is up.
alias net="ping google.com | grep -E --only-match --color=never '[0-9\.]+ ms'"

# Redis
alias start-redis="docker run --name some-redis -p 6379:6379 -d --restart=always redis:alpine redis-server --appendonly yes --requirepass 'secret'"
alias flush-redis="redis-cli FLUSHALL"

# Postgres
alias start-postgres="docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres:alpine"

#docker
alias pg-docker-start="docker run --name some-postgres -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres:alpine"

# Get latest container ID
alias dl="docker ps -l -q"

# Get container process
alias dps="docker ps"

# Get process included stop container
alias dpa="docker ps -a"

# Get images
alias di="docker images"

# Get container IP
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

# Run deamonized container, e.g., $dkd base /bin/echo hello
alias dkd="docker run -d -P"

# Run interactive container, e.g., $dki base /bin/bash
alias dki="docker run -i -t -P"

# Execute interactive container, e.g., $dex base /bin/bash
alias dex="docker exec -i -t"

# Stop all containers
dstop() { docker stop $(docker ps -a -q); }

# Remove all containers
drm() { docker rm $(docker ps -a -q); }

# Stop and Remove all containers
alias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'

# Remove all images
dri() { docker rmi $(docker images -q); }

# Dockerfile build, e.g., $dbu tcnksm/test
dbu() { docker build -t=$1 .; }

# Show all alias related docker
dalias() { alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/" | sed "s/['|\']//g" | sort; }

# Bash into running container
dbash() { docker exec -it $(docker ps -aqf "name=$1") bash; }

## fzf aliases
fo() {
	IFS=$'\n' out=("$(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)")
	key=$(head -1 <<<"$out")
	file=$(head -2 <<<"$out" | tail -1)
	if [ -n "$file" ]; then
		[ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
	fi
}

gh-delete-runs() {
	# Get the IDs of all failed runs
	ids=$(gh run list -s failure --limit=200 --json databaseId -q '.[].databaseId')

	# Loop over the IDs and delete each run
	for id in $ids; do
		gh run delete $id
	done
}

gi() {
	curl -sLw n https://www.toptal.com/developers/gitignore/api/$@ >.gitignore
}

git-branch-delete() {
	git branch | grep $@ | xargs git branch -D
}

git-redate() {
	GIT_COMMITTER_DATE="$1" git commit --amend --no-edit --date "$1"
}

git-fix-repo() {
	find .git/objects -type f -empty -delete
	git prune
	git fetch --all --prune
}



sssh() {
	# try to connect every 0.5 secs (modulo timeouts)
	while true; do
		command ssh "$@"
		[ $? -ne 255 ] && break || sleep 0.5
	done
}

git-branch-rename() {
	git checkout $1
	git branch -m $2
	git push origin -u $2
	git push origin --delete $1

}

code_update_extensions() {
	for ext in $(code --list-extensions); do
		code --install-extension "$ext" --force
	done
}

ffmpeg-convert() {
	for i in *.mp4; do
		ffmpeg -n -i "$i" -vcodec libx264 -v warning -hide_banner -stats -crf 28 -preset faster -tune film "cc${i}"
	done
}

convert-dir-vids() {
	Green=$'\e[1;32m'
	Blue=$'\e[1;34m'
	echo "$Blue Started converting videos in dir"
	for d in ./*/; do (echo "$Green Current directory: $d \n" && cd "$d" && ffmpeg_convert && rm $(ls -I "cc*")); done
	echo "finished converting all videos in directory"
}

zsh-fix-history() {
	cd ~
	mv .zsh_history .zsh_history_old
	strings .zsh_history_old >.zsh_history
	fc -R .zsh_history
}

if [ "$TERM" = "wezterm" ]; then
	alias fastfetch='fastfetch --logo-type iterm --logo-height 18 --logo-width 34'
fi

function calcram() {
	local sum
	sum=0
	for i in $(ps aux | grep -i "$1" | grep -v "grep" | awk '{print $6}'); do
		sum=$(($i + $sum))
	done
	sum=$(echo "scale=2; $sum / 1024.0" | bc)
	echo $sum
}

# Show how much RAM application uses.
# $ ram safari
# # => safari uses 154.69 MBs of RAM
function ram() {
	local sum
	local app="$1"
	if [ -z "$app" ]; then
		echo "First argument - pattern to grep from processes"
		return 0
	fi

	sum=$(calcram $app)
	if [[ $sum != "0" ]]; then
		echo "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM"
	else
		echo "No active processes matching pattern '${fg[blue]}${app}${reset_color}'"
	fi
}

# Same, but tracks RAM usage in realtime. Will run until you stop it.
# $ rams safari
function rams() {
	local sum
	local app="$1"
	if [ -z "$app" ]; then
		echo "First argument - pattern to grep from processes"
		return 0
	fi

	while true; do
		sum=$(calcram $app)
		if [[ $sum != "0" ]]; then
			echo -en "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM\r"
		else
			echo -en "No active processes matching pattern '${fg[blue]}${app}${reset_color}'\r"
		fi
		sleep 1
	done
}

function git-deploy() {
	git pull
	git push
	git checkout stage
	git pull
	git merge -X theirs dev
	git push
	git checkout main
	git pull
	git merge -X theirs stage
}

# $ size dir1 file2.js
function size() {
	# du -scBM | sort -n
	du -shck "$@" | sort -rn | awk '
      function human(x) {
          s="kMGTEPYZ";
          while (x>=1000 && length(s)>1)
              {x/=1024; s=substr(s,2)}
          return int(x+0.5) substr(s,1,1)
      }
      {gsub(/^[0-9]+/, human($1)); print}'
}

function reinstall-nvim() {
	rm -rf ~/.config/nvim
	rm -rf ~/.local/share/nvim
	git clone git@github.com:rubiin/init.lua .config/nvim
	if [[ ! -d personal-vim-plugs ]]; then
		mkdir ~/personal-vim-plugs
		git clone git@github.com:rubiin/fortune.nvim.git ~/personal-vim-plugs/fortune.nvim
		git clone git@github.com:rubiin/highlighturl.nvim.git ~/personal-vim-plugs/highlighturl.nvim
		git clone git@github.com:rubiin/vimwordlist.nvim.git ~/personal-vim-plugs/vimwordlist.nvim
	fi
	nvim
}

# Query http://cheat.sh for help with a command
cheat() {
	curl cheat.sh/$1
}
