[user]
	email = roobin.bhandari@gmail.com
	name = Rubin Bhandari

[includeIf "gitdir/i:**/cit-be/"]
	path = .gitconfig-takeo

[credential]
	helper = cache --timeout=86400

[pull]
	rebase = true

[init]
	defaultBranch = master

[core]
	# End of lines conversion
	autocrlf = false
	# Editor is vi of coursea
	editor = nvim --clean
	# Include your global excludefile
	excludefile = .gitignore_global
	# Don't paginate output by default
	pager = delta
	# Speed up the status command
	untrackedCache = true
	# Don't consider trailing space change as a cause for merge conflicts
 	whitespace=trailing-space,cr-at-eol,tabwidth=4

[sequence]
	editor = interactive-rebase-tool

[status]
	hints = false

[branch]
	sort = -committerdate ; sort by recency, not by name

[tag]
	sort = -committerdate

[fetch]
	prune = true ; automatically delete remote tracking branches that have been deleted

[push]
	autoSetupRemote = true ; create remote branch, if it doesn't exist

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[column]
	ui = auto

[maintenance]
	repo = /home/rubin/ultimate-nest
	repo = /home/rubin/.config/nvim
	repo = /home/rubin/.local/share/chezmoi

[interactive]
	diffFilter = delta --color-only

[rerere]
	enabled = true

[color]
	branch = auto
	diff = auto
	status = auto
	interactive = auto
	ui = true
	pager = true

[color.branch]
	current = yellow reverse
	local = yellow
	remote = green

[color.diff]
	meta = yellow
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse
	commit = yellow bold

[color.status]
	added = yellow
	changed = green
	untracked = cyan

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[delta]
	features = decorations
	line-numbers = true
	navigate = true

[delta "decorations"]
	minus-style = red bold
	minus-emph-style = red bold 52
	zero-style = normal
	plus-style = green bold
	plus-emph-style = green bold 22
	hunk-header-style = bold syntax
	hunk-header-decoration-style= bold magenta box
	file-style = bold yellow
	file-decoration-style = bold yellow ul ol
	commit-style = bold yellow

[merge]
	conflictstyle = diff3

[diff]
	colorMoved = default

[grep]
	# Consider most regexes to be ERE
	extendedRegexp = true

[help]
	# Replace the mistyped command in 0.1 seconds. 20 means two seconds
	autocorrect = 1

[pretty]
	lo  = tformat:%C(auto)%h%C(reset)%C(auto)%d%C(reset) %s %C(italic blue)%ad%C(reset) %C(241)%aN%C(reset)
	lc  =  format:%C(auto)%h%C(reset) %C(white)-%C(reset) %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%C(auto)%d%C(reset)%n %C(white)⤷%C(reset) %s %C(241)- %aN <%aE>%C(reset)%n
	lt  =  format:%C(auto)%h%C(reset) %C(white)-%C(reset) %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%C(auto)%d%C(reset)%n %C(white)⤷%C(reset) %s %C(241)- %aN <%aE>%C(reset)%n%w(0,7,7)%+(trailers:only,unfold)
	lf  =  format:%C(auto)%h%C(reset)%C(auto)%d%C(reset)   %C(italic 239)[P: %p] [T: %t]%C(reset)%n%C(white)Author:%C(reset)   %aN %C(241)<%aE>%C(reset)%n          %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%n%C(white)Commit:%C(reset)   %cN %C(241)<%cE>%C(reset)   %C(italic 239)[GPG: %G?% GK]%C(reset)%n          %C(italic blue)%cd%C(reset) %C(italic cyan)(%cr)%C(reset)%w(0,4,4)%n%n%C(bold)%s%C(reset)%n%n%-b%n%n%-N%n
	rlo = tformat:%C(auto)%h%C(reset) %C(bold yellow)(%C(magenta)%gd%C(bold yellow))%C(reset)%C(auto)%d%C(reset) %gs %C(italic blue)%ad%C(reset) %C(241)%aN%C(reset)
	rlc =  format:%C(auto)%h%C(reset) %C(white)-%C(reset) %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%C(auto)%d%C(reset)%n %C(white)⤷%C(reset) %s %C(241)- %aN <%aE>%C(reset)%n %C(white)⤷%C(reset) %C(bold yellow)(%C(magenta)%gd%C(bold yellow))%C(reset) %gs %C(241)- %gN <%gE>%C(reset)%n
	rlt =  format:%C(auto)%h%C(reset) %C(white)-%C(reset) %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%C(auto)%d%C(reset)%n %C(white)⤷%C(reset) %s %C(241)- %aN <%aE>%C(reset)%n %C(white)⤷%C(reset) %C(bold yellow)(%C(magenta)%gd%C(bold yellow))%C(reset) %gs %C(241)- %gN <%gE>%C(reset)%n%w(0,7,7)%+(trailers:only,unfold)
	rlf =  format:%C(auto)%h%C(reset) %C(bold yellow)(%C(magenta)%gd%C(bold yellow))%C(reset)%C(auto)%d%C(reset)   %C(italic 239)[P: %p] [T: %t]%C(reset)%n%C(white)Author:%C(reset)   %aN %C(241)<%aE>%C(reset)%n          %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%n%C(white)Commit:%C(reset)   %cN %C(241)<%cE>%C(reset)   %C(italic 239)[GPG: %G?% GK]%C(reset)%n          %C(italic blue)%cd%C(reset) %C(italic cyan)(%cr)%C(reset)%n%C(white)Reflog:%C(reset)   %gN %C(241)<%gE>%C(reset)%n          %C(italic)%gs%C(reset)%w(0,4,4)%n%n%C(bold)%s%C(reset)%n%n%-b%n%n%-N%n

[alias]
	# index
	a = add
	aa = add --all
	au = add --update
	ai = add --interactive
	ap = add --patch
	an = add --intent-to-add
	u = reset HEAD --
	up = reset --patch HEAD --

	# branch
	b = branch
	bc = branch --contains
	bd = branch --delete --force
	bl = branch -vv
	br = branch --all --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate
	bla = branch --all -vv

	# commit
	c = commit
	ca = commit --amend
	cm= commit -m
	cn = commit --no-verify
	cc = commit -c
	cf = commit --fixup
	cs = commit --squash
	can = commit --amend --no-edit

	# checkout
        com = "!f() { git checkout master 2>/dev/null || git checkout main; }; f"
	cod = checkout dev
	co = checkout
	cob = checkout -b

	# cherry-pick
	cp = cherry-pick
	cpa = cherry-pick --abort
	cpc = cherry-pick --continue
        cpq = cherry-pick --quit

	# diff
	d = diff -c
	db = "!f() { git diff --name-only --diff-filter=d | xargs bat --diff; }; f"
	ds = diff --find-renames --stat --cc -c
	dc = diff --cached -c
	dl = diff --cached -c HEAD~
	du = diff --cached -c @{u}
	dr = "!f() { git diff -c ${1:-HEAD}~..${1:-HEAD}; }; f"

        # GitFlow shortcuts
        # "fcb" alias is a shortcut for getting current branch for GitFlow (without prefix)
	# and is strictly related to [gitflow "prefix"] config section (cuts everything after first "/")
        fcb = "!f() { git rev-parse --abbrev-ref HEAD | cut -d'/' -f 2-; }; f"

	fid = flow init -d
   	ffs = "!f() { if [ ! -z $1 ] ; then git flow feature start $1; else echo 'Invalid name'; exit 1; fi; }; f"
  	fff = !git flow feature finish -F $(git fcb)
   	ffp = !git flow feature publish $(git fcb)

        fbs = "!f() { if [ ! -z $1 ] ; then git flow bugfix start $1; else echo 'Invalid name'; exit 1; fi; }; f"
        fbf = !git flow bugfix finish -F $(git fcb)
        fbp = !git flow bugfix publish $(git fcb)

        fhs = "!f() { if [ ! -z $1 ] ; then git flow hotfix start $1; else echo 'Invalid name'; exit 1; fi; }; f"
        fhf = !git flow hotfix finish -F $(git fcb)
        fhp = !git flow hotfix publish $(git fcb)

        frs = "!f() { if [ ! -z $1 ] ; then git flow release start $1; else echo 'Invalid name'; exit 1; fi; }; f"
        frf = !git flow release finish -F $(git fcb)
        frp = !git flow release publish $(git fcb)
 
        #cleaning up local branches after merging them
        forget="!git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D"
        forgetlist="!git fetch -p && git branch -vv | awk '/: gone]/{print $1}'"

	# log, current branch
	l  = log --pretty=lc --graph
	lo = log --pretty=lo --graph --date=human
	ls = log --pretty=lo --graph --date=human --simplify-by-decoration
	lf = log --pretty=lf --graph
	ld = log --pretty=lf --graph --cc --stat
	lp = log --pretty=lf --graph --cc --patch
	lol = log --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'

	# log, all branches+tags on all remotes
	la  = log --pretty=lc --graph                                       --all
	lao = log --pretty=lo --graph --date=human                          --all
	las = log --pretty=lo --graph --date=human --simplify-by-decoration --all
	laf = log --pretty=lf --graph                                       --all
	lad = log --pretty=lf --graph --cc --stat                           --all
	lap = log --pretty=lf --graph --cc --patch                          --all

	# log, all branches+tags on remotes 'origin' and 'upstream'
	lg  = log --pretty=lc --graph                                       --branches=* --tags=* --remotes=origin --remotes=upstream
	lgo = log --pretty=lo --graph --date=human                          --branches=* --tags=* --remotes=origin --remotes=upstream
	lgs = log --pretty=lo --graph --date=human --simplify-by-decoration --branches=* --tags=* --remotes=origin --remotes=upstream
	lgf = log --pretty=lf --graph                                       --branches=* --tags=* --remotes=origin --remotes=upstream
	lgd = log --pretty=lf --graph --cc --stat                           --branches=* --tags=* --remotes=origin --remotes=upstream
	lgp = log --pretty=lf --graph --cc --patch                          --branches=* --tags=* --remotes=origin --remotes=upstream

	# merge
	m = merge
	ma = merge --abort
	mc = merge --continue
	mff = merge --ff-only
	mnc = "!f() { git merge --no-commit --no-ff \"$@\"; EC=$?; git merge --abort; exit $EC; }; f"

	# Shorthand for mergetool
    	mt = mergetool

	# network (out)
	pu = push
	puf = push --force-with-lease
	puff = push --force
	pun = push --no-verify
	punf = push --no-verify --force-with-lease
	punff = push --no-verify --force

	# reflog
	rl  = reflog --pretty=rlc
	rlo = reflog --pretty=rlo
	rlf = reflog --pretty=rlf
	rld = reflog --pretty=rlf --stat

	# stash
	ss = stash                        # stash changes
  	sa = stash apply                  # apply stash (restore changes)
  	sd = stash drop                   # drop stashes (destroy changes)
	ssa = stash -u                    # include untracked files

	# list stashes
	sl  = stash list --pretty=rlc
	slo = stash list --pretty=rlo
	slf = stash list --pretty=rlf
	sld = stash list --pretty=rlf --stat
	sls = stash show --patch

	# inspection
	sh = show --stat --cc --summary --patch
	grep = grep -Ii
	desc = describe --abbrev=0
	descl = describe --long

	# status
	s = status
	si = status --ignored

        # show what I did today
        day = "!sh -c 'git log --reverse --no-merges --branches=* --date=local --after=\"yesterday 11:59PM\" --author=\"`git config --get user.name`\"'"
        
        # git-extras
  	cleanup = !ruby "$HOME/.bin/git-extras/git-cleanup.rb"
    	sign-release = !sh "$HOME/.bin/git-extras/git-sign-release"
   	setup = !zsh "$HOME/.bin/git-extras/git-setup.sh"
   	wth = !zsh "$HOME/.bin/git-extras/git-what-the-hell-just-happened"

        # tag
	t = tag
	tc = tag --contains
	td = tag --delete
	tp = push --tags

	# network (in)
	cl = clone
	pl = pull
	f = fetch --tags
	ff = fetch --force --prune --tags
	fa = fetch --all --tags
	ffa = fetch --all --force --prune --tags
	pfa = "!f() { git remote | xargs -I@ -P0 git fetch --tags \"$@\" @; }; f"

	# rebase
	r = rebase
	ra = rebase --abort
	rc = rebase --continue
	rq = rebase --quit
	rs = rebase --skip
	ret = rebase --edit-todo
	rsh = rebase --show-current-patch

	# interactive rebase
	ri = rebase --interactive
	riu = rebase --interactive @{u}
	rim = rebase --interactive master
	rid = rebase --interactive develop

	# revert
	rv = revert
	rva = revert --abort
	rvc = revert --continue
	rvq = revert --quit
	undo = reset --soft HEAD~1

	# reset
	re = reset
	res = reset --soft
	reh = reset --hard

	# submodule
	sub = submodule
	subu = submodule update --init --recursive

	# w-commands
	which = branch --all --contains
	which-tag = describe --always --contains
	who = shortlog --summary --numbered --no-merges
	whoami = "!echo $(git config --get user.name) '<'$(git config --get user.email)'>'"
	watch = "!f() { watch -ctn 2 git \"${@:-l}\"; }; f"

	#via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
 	recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

	# show authors and and commit counts
	#    git thanks [<git-log-args>...]
	thanks = "!f() { git log --pretty=tformat:'%aN <%aE>' \"$@\" | sort | uniq -c | sort -rn; }; f"

	# open GitHub repository in browser
	#    git open [<remote>]
	open = "!f() { URL=$(git config remote.${1:-origin}.url); xdg-open \"${URL%%.git}\"; }; f"

	# set up remotes for fork
	#    git fork [<old-remote> [<new-remote>]]
	fork = "!f() { URL=$(git config remote.${1:-origin}.url); git remote set-url ${1:-origin} \"$(echo \"$URL\" | perl -pe 's/(?<=[:\\/])[^:\\/]+(?=\\/[^\\/]+$)/alfunx/')\"; git remote add ${2:-upstream} \"$URL\"; git config branch.master.remote ${2:-upstream}; git config branch.master.pushRemote ${1:-origin}; }; f"

	# fetch and checkout a GitHub pull request / a GitLab merge request
	#    git fetch-pr <remote> <number> [<branchname>]
	#    git fetch-mr <remote> <number> [<branchname>]
	fetch-pr = "!f() { [ $# -lt 2 ] && echo 'usage: git pr <remote> <number>' 1>&2 && exit 1; it fetch $1 pull/$2/head:${3:-pr-$1-$2} && git checkout ${3:-pr-$1-$2}; }; f"
	fetch-mr = "!f() { [ $# -lt 2 ] && echo 'usage: git mr <remote> <number>' 1>&2 && exit 1; it fetch $1 merge-requests/$2/head:${3:-mr-$1-$2} && git checkout ${3:-mr-$1-$2}; }; f"

	# track all pull-requests / merge-requests
	#    git setup-fetch [<remote>]
	setup-fetch = "!f() { git config --add remote.${1:-origin}.fetch \"+refs/pull/*/head:refs/remotes/${1:-origin}/pull-requests/*\"; git config --add remote.${1:-origin}.fetch \"+refs/merge-requests/*/head:refs/remotes/${1:-origin}/merge-requests/*\"; }; f"

	# hard reset with commit before (use reflog to recover)
	#    git wipe [<commit>]
	wipe = "!f() { git add --all && git commit --quiet --message='WIPE-SAVEPOINT' && git reset ${1:-HEAD~} --hard && git clean -fd; }; f"

	# generate tags file
	ctags = "!$HOME/.config/git/hooks/ctags"

	# create/extend gitignore file
	gitignore = gitignore

	# git git ...
	git = "!git"
[gpg]
	format = ssh
