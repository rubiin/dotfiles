#!/usr/bin/env bash
#
# Usage: git-up
#        git-reup
#
# Like git-pull but show a short and sexy log of changes
# immediately after merging (git-up) or rebasing (git-reup).
#
# Inspired by Kyle Neath's `git up' alias:
# http://gist.github.com/249223
#
# Stolen from Ryan Tomayko
# http://github.com/rtomayko/dotfiles/blob/rtomayko/bin/git-up

set -euo pipefail

declare is_reup
is_reup=false
test "$(basename "${0}")" = "git-reup" && is_reup=true

# Quietly perform a fetch with prune
git fetch --multiple --prune --quiet

declare -a pull_args

if (($#)); then
  pull_args=("${@}")
else
  pull_args=()
fi

# when invoked as git-reup, run as `git pull --rebase'
${is_reup} && pull_args=(--rebase "${pull_args[@]}")

git pull "${pull_args[@]}"
echo

# show diffstat of all changes if we're pulling with --rebase. not
# sure why git-pull only does this when merging.
${is_reup} && {
  declare diff
  diff=$(git --no-pager diff --color --stat HEAD@'{1}'.. | sed 's/^/ /')

  [[ -z "${diff}" ]] || printf "Diff:\n%s\n\n" "${diff}"
}

# show an abbreviated commit log of stuff that was just merged.
{
  declare log
  log=$(git log --color --pretty=oneline --abbrev-commit HEAD@'{1}'.. | sed 's/^/  /')
  [[ -z "${log}" ]] || printf "Log:\n%s\n\n" "${log}"
}

echo "Branches:"
git branch -vv

# Update any submodules
git submodule --quiet update --init --recursive
